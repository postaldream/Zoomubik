# Flutter CI — build release APK and upload artifact (auto-detect project dir)
name: Flutter CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build_apk:
    name: Build Android APK
    runs-on: ubuntu-latest
    timeout-minutes: 40

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Show repo root (debug)
        run: |
          echo "Workspace: $GITHUB_WORKSPACE"
          ls -la

      - name: Detect Flutter project directory
        id: detect
        run: |
          # If root contains pubspec.yaml and lib/main.dart, use root
          if [ -f "pubspec.yaml" ] && [ -d "lib" ] && [ -f "lib/main.dart" ]; then
            proj="."
          else
            # search up to depth 3 for pubspec.yaml (skip .github)
            proj=$(find . -maxdepth 3 -type f -name pubspec.yaml -not -path "./.github/*" -printf '%h\n' | head -n 1 || true)
          fi
          if [ -z "$proj" ]; then
            echo "No Flutter project (pubspec.yaml) found within depth 3. Repo layout:"
            find . -maxdepth 2 -type d -print
            echo "ERROR_NO_PROJECT" >&2
            exit 1
          fi
          # normalize path (remove leading ./)
          proj=${proj#./}
          echo "Detected project dir: $proj"
          echo "project_dir=$proj" >> "$GITHUB_OUTPUT"

      - name: Flutter doctor (debug)
        run: |
          echo "Using project dir: ${{ steps.detect.outputs.project_dir }}"
          # run flutter doctor
          flutter doctor -v

      - name: Install dependencies
        run: |
          cd "${{ steps.detect.outputs.project_dir }}"
          flutter pub get

      - name: Setup signing (optional, from Secrets)
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          cd "${{ steps.detect.outputs.project_dir }}"
          if [ -n "$KEYSTORE_BASE64" ]; then
            mkdir -p android/app
            echo "$KEYSTORE_BASE64" | base64 --decode > android/app/key.jks
            printf "storePassword=%s\nkeyPassword=%s\nkeyAlias=%s\nstoreFile=app/key.jks\n" "$KEYSTORE_PASSWORD" "$KEY_PASSWORD" "$KEY_ALIAS" > android/key.properties
            echo "Keystore and key.properties created"
          else
            echo "No keystore secret provided — building unsigned APK"
          fi

      - name: Build APK (release)
        run: |
          cd "${{ steps.detect.outputs.project_dir }}"
          # sanity check
          if [ ! -f "lib/main.dart" ]; then
            echo "lib/main.dart not found in project dir: $(pwd)"
            echo "Make sure the Flutter app exists in the detected project directory" >&2
            exit 1
          fi
          flutter build apk --release

      - name: Show build output (debug)
        if: always()
        run: |
          echo "Listing build outputs (may be empty if build failed):"
          find "${{ steps.detect.outputs.project_dir }}" -type f -path "*/build/app/outputs/flutter-apk/*" -maxdepth 6 -print || true

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: zoomubik-apk
          # use a glob to find apk anywhere in the workspace
          path: '**/build/app/outputs/flutter-apk/*.apk'
